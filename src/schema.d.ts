/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/v1/get-workspaces": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Get workspaces
		 * @description Retrieves the list of workspaces for the authenticated user
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["WorkspaceResponse"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v2/get-documents": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Get documents
		 * @description Retrieves the list of documents for the authenticated user
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["DocumentsResponse"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v1/get-document-metadata": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Get document metadata
		 * @description Retrieves metadata for a specific document
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": {
						document_id: string;
					};
				};
			};
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["DocumentMetadata"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v1/get-document-transcript": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Get document transcript
		 * @description Retrieves the transcript for a specific document
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": {
						document_id: string;
					};
				};
			};
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["TranscriptSegment"][];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v1/update-document": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Update document
		 * @description Updates a document
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v1/update-document-panel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Update document panel
		 * @description Updates a document panel
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v1/get-panel-templates": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Get panel templates
		 * @description Retrieves available panel templates
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PanelTemplate"][];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v1/get-people": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Get people
		 * @description Retrieves people data
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v1/get-feature-flags": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Get feature flags
		 * @description Retrieves feature flags for the authenticated user
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v1/get-notion-integration": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Get Notion integration
		 * @description Retrieves Notion integration details
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v1/get-subscriptions": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Get subscriptions
		 * @description Retrieves subscription information for the authenticated user
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v1/refresh-google-events": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Refresh Google events
		 * @description Refreshes Google Calendar events
		 */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v1/check-for-update/latest-mac.yml": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Check for update
		 * @description Checks for application updates
		 */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Successful response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		Workspace: {
			/** Format: uuid */
			workspace_id?: string;
			slug?: string;
			display_name?: string;
			is_locked?: boolean;
			/** Format: date-time */
			created_at?: string;
			/** Format: date-time */
			updated_at?: string;
			privacy_mode_enabled?: boolean;
			sharing_link_visibility?: string | null;
		};
		WorkspaceResponse: {
			workspaces?: {
				workspace?: components["schemas"]["Workspace"];
				role?: string;
				plan_type?: string;
			}[];
		};
		Document: {
			/** Format: uuid */
			id?: string;
			/** Format: date-time */
			created_at?: string;
			notes?: {
				type?: string;
				content?: Record<string, never>[];
			};
			title?: string;
			user_id?: string;
			cloned_from?: string | null;
			notes_plain?: string;
			transcribe?: boolean;
			google_calendar_event?: Record<string, never> | null;
			/** Format: date-time */
			updated_at?: string;
			/** Format: date-time */
			deleted_at?: string | null;
			type?: string | null;
			overview?: string | null;
			public?: boolean;
			people?: {
				creator?: {
					name?: string;
					email?: string;
					details?: Record<string, never>;
				};
				attendees?: Record<string, never>[];
			};
			chapters?: unknown[] | null;
			meeting_end_count?: number;
			notes_markdown?: string;
			selected_template?: string | null;
			valid_meeting?: boolean;
			summary?: string | null;
			has_shareable_link?: boolean;
			show_private_notes?: boolean;
			attachments?: Record<string, never>[];
			privacy_mode_enabled?: boolean;
			sharing_link_visibility?: string;
		};
		DocumentsResponse: {
			docs?: components["schemas"]["Document"][];
		};
		DocumentMetadata: {
			creator?: {
				name?: string;
				email?: string;
				details?: {
					person?: {
						name?: {
							fullName?: string;
						};
						avatar?: string;
						employment?: {
							title?: string;
							name?: string;
						};
					};
					company?: {
						name?: string;
					};
				};
			};
			attendees?: Record<string, never>[];
		};
		TranscriptSegment: {
			document_id?: string;
			/** Format: date-time */
			start_timestamp?: string;
			text?: string;
			source?: string;
			id?: string;
			is_final?: boolean;
			/** Format: date-time */
			end_timestamp?: string;
		};
		PanelTemplate: {
			id?: string;
			is_granola?: boolean;
			/** Format: date-time */
			created_at?: string;
			owner_id?: string | null;
			category?: string;
			title?: string;
			/** Format: date-time */
			deleted_at?: string | null;
			sections?: {
				id?: string;
				heading?: string;
				section_description?: string;
			}[];
			color?: string;
			symbol?: string;
			description?: string;
			shared_with?: string;
			copied_from?: string;
			/** Format: date-time */
			updated_at?: string;
			user_types?: {
				user_type?: string;
			}[];
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
