import fs from "node:fs";
import path from "node:path";
import { load } from "js-yaml";

const specPath = path.join(__dirname, "..", "openapi.yaml");
const spec = load(fs.readFileSync(specPath, "utf8")) as Record<string, unknown>;
const operations: Array<{ method: string; path: string }> = [];
for (const [p, methods] of Object.entries<Record<string, unknown>>(
	spec.paths,
)) {
	const method = Object.keys(methods)[0];
	operations.push({ method, path: p });
}

let output =
	"// Auto-generated by scripts/generate-client.ts using openapi-typescript-codegen style\n";
output += `import { Http } from './http';\n`;
output += "export class GranolaClient {\n";
output += "  constructor(private http: Http) {}\n";
for (const op of operations) {
	const fnName = op.path.replace(/[^a-zA-Z0-9]/g, "_").replace(/^_+|_+$/g, "");
	if (op.method.toLowerCase() === "get") {
		output += `  public async ${fnName}(): Promise<unknown> {\n    return this.http.get('${op.path}');\n  }\n`;
	} else {
		output += `  public async ${fnName}(body: Record<string, unknown> = {}): Promise<unknown> {\n    return this.http.post('${op.path}', body);\n  }\n`;
	}
}
output += "}\n";
output += "export default GranolaClient;\n";
fs.writeFileSync(path.join(__dirname, "..", "src", "client.ts"), output);
