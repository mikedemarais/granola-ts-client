import fs from "node:fs";
import path from "node:path";
import yaml from "yaml";

const specPath = path.join(__dirname, "..", "openapi.yaml");
const spec = yaml.parse(fs.readFileSync(specPath, "utf8"));
const operations: Array<{ method: string; path: string }> = [];
for (const [p, methods] of Object.entries<Record<string, unknown>>(
	spec.paths,
)) {
	const method = Object.keys(methods)[0];
	operations.push({ method, path: p });
}

let output = "// Auto-generated by scripts/generate-client.ts\n";
output += `import { Http } from './http';\n`;
output += "export class GeneratedClient {\n";
output += "  constructor(private http: Http) {}\n";
for (const op of operations) {
	const fnName = op.path
		.replace(/\/.|[^a-zA-Z0-9]/g, "_")
		.replace(/^_+|_+$/g, "");
	if (op.method.toLowerCase() === "get") {
		output += `  public async ${fnName}(): Promise<any> {\n    return this.http.get('${op.path}');\n  }\n`;
	} else {
		output += `  public async ${fnName}(body: any = {}): Promise<any> {\n    return this.http.post('${op.path}', body);\n  }\n`;
	}
}
output += "}\n";
fs.writeFileSync(
	path.join(__dirname, "..", "src", "generated-client.ts"),
	output,
);
